A*
def aStarAlgo(start_node, stop_node):
 open_set = set(start_node)
 closed_set = set()
 g = {} #store distance from starting node
 parents = {} # parents contains an adjacency map of all nodes
 #distance of starting node from itself is zero
 g[start_node] = 0
 #start_node is root node i.e it has no parent nodes
 #so start_node is set to its own parent node
 parents[start_node] = start_node

 while len(open_set) > 0:
 n = None
 #node with lowest f() is found
 for v in open_set:
 if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
 n = v

 if n == stop_node or Graph_nodes[n] == None:
 pass
 else:
 for (m, weight) in get_neighbors(n):
 #nodes 'm' not in first and last set are added to first
 #n is set its parent
 if m not in open_set and m not in closed_set:
 open_set.add(m)
 parents[m] = n
 g[m] = g[n] + weight

 #for each node m,compare its distance from start i.e g(m) to the
 #from start through n node
 else:
 if g[m] > g[n] + weight:
 #update g(m)
 g[m] = g[n] + weight
 #change parent of m to n
 parents[m] = n

 #if m in closed set,remove and add to open
 if m in closed_set:
 closed_set.remove(m)
 open_set.add(m)
 if n == None:
 print('Path does not exist!')
 return None
 # if the current node is the stop_node
 # then we begin reconstructin the path from it to the start_node
 if n == stop_node:
 path = []
 while parents[n] != n:
 path.append(n)
 n = parents[n]
 path.append(start_node)
 path.reverse()
 print('Path found: {}'.format(path))
 return path
 # remove n from the open_list, and add it to closed_list
 # because all of his neighbors were inspected
 open_set.remove(n)
 closed_set.add(n)
 print('Path does not exist!')
 return None

#define fuction to return neighbor and its distance
#from the passed node
def get_neighbors(v):
 if v in Graph_nodes:
 return Graph_nodes[v]
 else:
 return None
#for simplicity we ll consider heuristic distances given
#and this function returns heuristic distance for all nodes
def heuristic(n):
 H_dist = {
 'A': 11,
 'B': 6,
 'C': 5,
 'D': 7,
 'E': 3,
 'F': 6,
 'G': 5,
 'H': 3,
 'I': 1,
 'J': 0
 }
 return H_dist[n]
#Describe your graph here
Graph_nodes = {
 'A': [('B', 6), ('F', 3)],
 'B': [('C', 3), ('D', 2)],
 'C': [('D', 1), ('E', 5)],
 'D': [('C', 1), ('E', 8)],
 'E': [('I', 5), ('J', 5)],
 'F': [('G', 1),('H', 7)] ,
 'G': [('I', 3)],
 'H': [('I', 2)],
 'I': [('E', 5), ('J', 3)],
}
aStarAlgo('A', 'J')




************************Candidate Elimination********** 
import pandas as pd
import numpy as np
data = pd.read_csv('Training_examples.csv')
concept = np.array(data)[:,:-1]
print("The concepts to be learned")
print(concept)
target = np.array(data)[:,-1]
print("\nLabels specific to the concepts\n")
print(target)
print("\n")
def learn(concept,target):
specific_h = concept[0].copy()
general_h = [['?' for i in range(len(specific_h))] for i in range(len(specific_h))]

for i,h in enumerate(concept):
if target[i]=='Yes':
for j in range(len(specific_h)):
if h[j]!=specific_h[j]:
specific_h[j]='?'
general_h[j][j]='?'
elif target[i]=='No':
for j in range(len(specific_h)):
if h[j]!=specific_h[j]:
general_h[j][j]=specific_h[j]
else:
general_h[j][j]='?'
indices = [i for i,val in enumerate(general_h) if val==['?' for i in range(len(specific_h))]]
for i in indices:
general_h.remove(['?' for i in range(len(specific_h))])
return specific_h,general_h
s_final, g_final = learn(concept,target)
print("Final S: ", s_final)
print("Final G: ", g_final)


************************ID3**************************
import pandas as pd
import numpy as np
import math
class Node:
def __init__(self, l):
self.label = l
self.branch = {}
def entropy(data):
total_ex = len(data)
p_ex = len(data.loc[data['PlayTennis']=='Yes'])
n_ex = len(data.loc[data['PlayTennis']=='No'])
en = 0
if(p_ex>0):
en = -(p_ex/float(total_ex)) * (math.log(p_ex,2)-math.log(total_ex,2))
if(n_ex>0):
en += -(n_ex/float(total_ex)) * (math.log(n_ex,2)-math.log(total_ex,2))
return en
def gain(en_s,data_s,attrib):
values = set(data_s[attrib])
#print(values)
gain = en_s
for value in values:
gain -= len(data_s.loc[data_s[attrib]==value])/float(len(data_s)) *
entropy(data_s.loc[data_s[attrib]==value])
return gain
def get_attr(data):
en_s = entropy(data)
attribute = ""
max_gain = 0
for attr in data.columns[:len(data.columns)-1]:
g = gain(en_s, data, attr)
if g > max_gain:
max_gain = g
attribute = attr
return attribute
def decision_tree(data):
root = Node("NULL")
if(entropy(data)==0):
if(len(data.loc[data[data.columns[-1]]=="Yes"]) == len(data)):
root.label = "Yes"
else:
root.label = "No"
return root
if(len(data.columns)==1):
return
else:
attr = get_attr(data)
root.label = attr
values = set(data[attr])
for value in values:
root.branch[value] =
decision_tree(data.loc[data[attr]==value].drop(attr,axis=1))
return root
def get_rules(root, rule, rules):
if not root.branch:
rules.append(rule[:-1]+"=>"+root.label)
return rules
for val in root.branch:
# print(val)
get_rules(root.branch[val], rule+root.label+"="+str(val)+"^", rules)
return rules
def test(tree, test_str):
if not tree.branch:
return tree.label
return test(tree.branch[str(test_str[tree.label])], test_str)
data = pd.read_csv("tennis.csv")
tree = decision_tree(data)
rules = get_rules(tree," ",[])
for rule in rules:
print(rule)
test_str = {}
print("Enter the test case input: ")
for attr in data.columns[:-1]:
test_str[attr] = input(attr+": ")
print(test_str)
print(test(tree, test_str))
